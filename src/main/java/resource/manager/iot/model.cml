/* Example Context Map written with 'ContextMapper DSL' */
ContextMap InsuranceContextMap {
	type = SYSTEM_LANDSCAPE
	state = TO_BE
	/* Add bounded contexts to this context map: */
	contains RemoteMaintenanceContext
	contains AugmentedRealityMaintenanceContext
	contains LicenceManagerContext
	contains TicketingContext
	contains CustomerManagementContext
	contains AuthenticationContext
	contains OptimizingToolContext
	contains TelemetryDataAcquisitionContext
	contains TelemetryDashboardContext
	contains ResourceManagerUIContext
	contains SparePartMarketplaceContext
	contains PredictiveMaintenanceContext
	contains DiagnosticContext
	contains MachineManagementContext
	contains UserContext

	/* Define the context relationships: */
	AugmentedRealityMaintenanceContext[U, S] -> [D, C]RemoteMaintenanceContext {
		implementationTechnology = "RESTfulHTTP"
	}

	MachineManagementContext[U, OHS, PL] -> [D, CF]TicketingContext {
		implementationTechnology = "RESTfulHTTP"
	}

	MachineManagementContext[U, OHS, PL] -> [D, CF]TelemetryDashboardContext {
		implementationTechnology = "RESTfulHTTP"
	}

	MachineManagementContext[U, OHS, PL] -> [D, CF]DiagnosticContext {
		implementationTechnology = "RESTfulHTTP"
	}

	MachineManagementContext[U, OHS, PL] -> [D, CF]PredictiveMaintenanceContext {
		implementationTechnology = "RESTfulHTTP"
	}

	MachineManagementContext[U, OHS, PL] -> [D]ResourceManagerUIContext {
		implementationTechnology = "RESTfulHTTP"
	}

	CustomerManagementContext[U, OHS, PL] -> [D]ResourceManagerUIContext {
		implementationTechnology = "RESTfulHTTP"
	}

	CustomerManagementContext[U, OHS, PL] -> [D, CF]LicenceManagerContext {
		implementationTechnology = "RESTfulHTTP"
	}

	CustomerManagementContext[U, OHS, PL] -> [D, CF]SparePartMarketplaceContext {
		implementationTechnology = "RESTfulHTTP"
	}

	CustomerManagementContext[U, OHS, PL] -> [D, CF]RemoteMaintenanceContext {
		implementationTechnology = "RESTfulHTTP"
	}

	DiagnosticContext[U, PL] -> [D]ResourceManagerUIContext {
		implementationTechnology = "RESTfulHTTP"
	}

	TelemetryDataAcquisitionContext[U, S] -> [D, C]MachineManagementContext {
		implementationTechnology = "MQTT"
	}

	LicenceManagerContext[U, PL] -> [D]ResourceManagerUIContext {
		implementationTechnology = "RESTfulHTTP"
	}

	OptimizingToolContext[U, PL] -> [D]MachineManagementContext {
		implementationTechnology = "RESTfulHTTP"
	}

	OptimizingToolContext[U, PL] -> [D]ResourceManagerUIContext {
		implementationTechnology = "RESTfulHTTP"
	}

	PredictiveMaintenanceContext[U, S] -> [D, C]DiagnosticContext {
		implementationTechnology = "RESTfulHTTP"
	}

	RemoteMaintenanceContext[U, PL] -> [D]ResourceManagerUIContext {
		implementationTechnology = "RESTfulHTTP"
	}

	SparePartMarketplaceContext[U, PL] -> [D]ResourceManagerUIContext {
		implementationTechnology = "RESTfulHTTP"
	}

	TelemetryDashboardContext[P] <-> [P]ResourceManagerUIContext {
		implementationTechnology = "RESTfulHTTP"
	}

	TicketingContext[U, S] -> [D, C]CustomerManagementContext {
		implementationTechnology = "RESTfulHTTP"
	}

	TicketingContext[U, S] -> [D, C]DiagnosticContext {
		implementationTechnology = "RESTfulHTTP"
	}

	UserContext[U, PL] -> [D]ResourceManagerUIContext {
		implementationTechnology = "RESTfulHTTP"
	}

	UserContext[D, CF] <- [U, OHS]AuthenticationContext {
		implementationTechnology = "RESTfulHTTP"
	}

	UserContext[U, S] -> [D, C]CustomerManagementContext {
		implementationTechnology = "RESTfulHTTP"
	}
}

/* Bounded Context Definitions */
BoundedContext RemoteMaintenanceContext implements RemoteMaintenanceDomain {
	type = APPLICATION
	domainVisionStatement = "This bounded context manages the remote connection to a machine"
	responsibilities = "RemoteMaintenance, SupportTechnitian, MaintenanceChat, VPNTunnel"
	implementationTechnology = "C#, Apache Guacamole, OpenVPN"
	Aggregate RemoteMaintenances {
		Entity RemoteMaintenance {
			aggregateRoot
			Date creationDate
			Date resolutionDate
			String finalReport
			int maintenanceId
			- CustomerData customerData
			- List<MachineStatus> machineStatus
			- List<SupportTechnitian> supportTechnitians
			- MaintenanceChat chat
			- VPNTunnel vpnTunnel
		}
		ValueObject CustomerData {
			String username
			String name
			String phoneNumber
		}
		ValueObject MachineStatus{
			String sensorName
			String sensorStatus
			String alarm
			int errorCode
			Date timestamp
		}
		ValueObject ChatMessage{
			String username
			String text
			Date timestamp
		}
		Entity MaintenanceChat{
			int chatId
			List<Users> participants
			Date startTime
			Date endTime
			- List<ChatMessage> chatMessages
		}
		Entity SupportTechnitian{
			String username
			String name
			String phoneNumber
		}
		Entity VPNTunnel{
			Date creationTime
			Date closureTime
			int tunnelID
		}
	}
}

BoundedContext AugmentedRealityMaintenanceContext implements RemoteMaintenanceDomain {
	type = APPLICATION
	domainVisionStatement = "This bounded context manages the remote connection to a machine allowing the use of augmented reality."
	responsibilities = "AugmentedRealityMaintenance, AugmentedRealityDevice"
	Aggregate AugmentedRealityMaintenances {
		Entity AugmentedRealityMaintenance{
			aggregateRoot
			int augmentedRealityMaintenanceId
			- AugmentedRealityDevice device
		}
		Entity AugmentedRealityDevice {
			int deviceId
			int customerId
			String description
		}
	}
}

BoundedContext LicenceManagerContext implements CustomerManagementDomain {
	type = SYSTEM
	domainVisionStatement = "This bounded context is responsible of services' licences generation and their validity."
	responsibilities = "ServiceLicense, ServiceSystem"
	implementationTechnology = "C#"
	Aggregate ServiceLicenses {
		Entity ServiceLicense{
			aggregateRoot
			Date startDate
			Date expireDate
			- Customer customer
			- ServiceSystem service
			int licenceId
			String licenceCode
		}
		Entity ServiceSystem {
			int serviceSystemId
			BigDecimal price
			Date duration
			String description
		}
	}
}

BoundedContext CustomerManagementContext implements CustomerManagementDomain {
	type = APPLICATION
	domainVisionStatement = "This bounded context manages the customers."
	responsibilities = "Customer, CustomerAddress"
	implementationTechnology = "C#"
	Aggregate Customers {
		Entity Customer {
			aggregateRoot
			String firstname
			String lastname
			String username
			String phoneNumber
			String ^email
			- Tickets tickets
			- List<CustomerAddress> addresses
		}
		Entity CustomerAddress {
			String street
			int postalCode
			String city
		}
		ValueObject Tickets{
			- List<SupportTicket> tickets
		}
	}
	Aggregate Payments{
		Entity Payment{
			int paymentId
			Date paymentDate
			Date paymentDeadline
			- PaymentState paymentState
		}
		enum PaymentState {
			SCHEDULED, PERFORMED
		}
	}
}

BoundedContext TicketingContext implements CustomerManagementDomain {
	type = SYSTEM
	domainVisionStatement = "This bounded context manages the customer's and diagnosis system support request and generates support tickets."
	responsibilities = "SupportTicket"
	implementationTechnology = "C#"
	Aggregate SupportTickets {
		Entity SupportTicket {
			aggregateRoot
			int ticketId
			int customerId
			int machineId
			Date creationDate
			String description
			- TicketPriority priority
		}
		enum TicketPriority {
			SMALL,MODERATE,URGENT
		}
	}
}

BoundedContext AuthenticationContext implements UserDomain {
	type = SYSTEM
	domainVisionStatement = "This bounded context manages user's authentication and his role in the organization."
	responsibilities = "UserAccount"
	implementationTechnology = "Azure Active Directory"
	Aggregate Acounts {
		Entity UserAccount {
			aggregateRoot
			String username
			- AccountRole role
		}
		enum AccountRole {
			CUSTOMER,ADMINISTRATOR,RATAIL,RETEIL_SUPPORT,SUPPORT_TECHNITIAN
		}
	}
}

BoundedContext UserContext implements UserDomain {
	type = SYSTEM
	domainVisionStatement = "This bounded context manages all the information related to a user."
	implementationTechnology = "Azure Active Directory"
	responsibilities = "Users, Addresses"
	Aggregate Users {
		Entity User {
			aggregateRoot
			String firstname
			String lastname
			String username
			- UserRole role
			- List<Address> addresses
			def AddressId createAddress(@Address address);
			def boolean updateUser(String firstname, String lastname);
		}
		enum UserRole {
			CUSTOMER,ADMINISTRATOR,RATAIL,RETEIL_SUPPORT,SUPPORT_TECHNITIAN
		}
		Entity Address {
			String street
			int postalCode
			String city
		}
	}
}

BoundedContext MachineManagementContext implements MachineDomain {
	type = SYSTEM
	domainVisionStatement = "This bounded context manages all the tecnical and telemetry data related to a machine."
	responsibilities = "MachineData"
	implementationTechnology = "Azure Time Series Insights"
	Aggregate MachinesData{
		Entity MachineData{
			aggregateRoot
			int customerId
			int machineId
			Location location
			String description
			Date purchaseDate
			- Machine machine
			- List<Sensor> sensorStatus
		}
	}
}

BoundedContext TelemetryDataAcquisitionContext implements MachineDomain {
	type = APPLICATION
	domainVisionStatement = "This bounded context is responsible of the data acquisition from a machine."
	responsibilities = "Sensor, Machine"
	implementationTechnology = "C#, OPC UA client, field gateway"
	Aggregate Sensors{
		Entity Sensor{
			aggregateRoot
			String sensorName
			String sensorStatus
			String alarm
			String sensorValue
			String sensorType
			int errorCode
			Date timestamp
			- Machine machine
		}
		Entity Machine{
			int machineId
			int customerId
			Location location
			String description
			Date purchaseDate
		}
	}
}

BoundedContext OptimizingToolContext implements MachineOptimizationDomain {
	type = SYSTEM
	domainVisionStatement = "This bounded context is responsible of the machine production optimization."
	responsibilities = ""
}

BoundedContext TelemetryDashboardContext implements UserInterfaceDomain {
	type = FEATURE
	domainVisionStatement = "This bounded context is responsible of the telemetry data visualization to the user."
	responsibilities = "TelemetryData, SensorData"
	implementationTechnology = "ReactJS, TSI client"
	Aggregate TelemetryDatas{
		Entity TelemetryData{
			aggregateRoot
			String description
			int customerId
			- SensorData sensorData
			int enviromnemtId
		}
		ValueObject SensorStatus{
			String sensorName
			String sensorStatus
			String sensorType
			String sensorValue
			Date timestamp
		}
		Entity SensorData{
			int sensorId
			- List<SensorStatus> sensorStatus
		}
	}
}

BoundedContext ResourceManagerUIContext implements UserInterfaceDomain {
	type = APPLICATION
	domainVisionStatement = "This bounded context represents the main user interface. It's the access point to the application and it's related to almost all the other bounded contexts."
	responsibilities = "ResourceManagerUI"
	implementationTechnology = "ReactJS"
	Aggregate ResourceManagerUI{
		Entity ResourceManagerUI{
			aggregateRoot
			- User user
			- ShoppingCart cart
			- List<Product> products
			- List<Order> orders
			- List<RemoteMaintenance> maintenances
			- List<TelemetryData> telemetryData
			- List<DiagnosticData> diagnosticData
			- List<MachineData> rawMachineData
			- Tickets supportTickets
			- List<ServiceLicense> licenses
		}
	}
}

BoundedContext SparePartMarketplaceContext implements SparePartMarketplaceDomain {
	type = SYSTEM
	domainVisionStatement = "This bounded context manages the spare part orders from the users."
	responsibilities = "ShoppingCart, Product, Order, Payment"
	implementationTechnology = "ReactJS, C#"
	Aggregate ShoppingCarts {
		Entity ShoppingCart{
			aggregateRoot
			int shoppingCartId
			- Customer customer
			- List<Product> products
		}
	}
	Aggregate Products {
		Entity Product {
			aggregateRoot
			int productId
			String productName
			BigDecimal price
		}
	}
	Aggregate Orders {
		Entity Order {
			aggregateRoot
			int orderId
			Date creationDate
			- Customer customer
			- ShoppingCart cart
			BigDecimal totalPrice
			- Payment payment
		}
		Entity Shipping{
			int shippingId
			Date shippingDate
			Location origin
			Location destination
			String shippingInfo
		}
	}
}

BoundedContext PredictiveMaintenanceContext implements DiagnosticDomain {
	type = SYSTEM
	domainVisionStatement = "This bounded context manages the predictive maintenance by analyzing the machine generated data."
	responsibilities = "PredictiveMaintenance"
	Aggregate PredictiveMaintenance{
		Entity PredictiveMaintenance{
			aggregateRoot
			String description
			int customerId
			- MachineData machineData
		}
	}
}

BoundedContext DiagnosticContext implements DiagnosticDomain {
	type = SYSTEM
	domainVisionStatement = "This bounded context is responsible of the real time data analysis and anomaly detections."
	responsibilities = "DiagnosticData, Malfunction"
	Aggregate DiagnosticsData{
		Entity DiagnosticData{
			aggregateRoot
			String description
			int customerId
			int machineId
			- List<Malfunction> malfunction
		}
		Entity Malfunction{
			int malfunctionId
			- MachineData machineData
		}
	}
}

/* Domain & Subdomain Definitions */
Domain ResourceManagerIoT {
	Subdomain RemoteMaintenanceDomain {
		type = CORE_DOMAIN
		domainVisionStatement = "Subdomain that manages everything user support related."
	}

	Subdomain MachineDomain {
		type = CORE_DOMAIN
		domainVisionStatement = "Subdomain that manages everything machine related."
	}

	Subdomain UserInterfaceDomain {
		type = SUPPORTING_DOMAIN
		domainVisionStatement = "Subdomain that manages everything related to the user interface."
	}

	Subdomain DiagnosticDomain {
		type = CORE_DOMAIN
		domainVisionStatement = "Subdomain that manages everything related to machine diagnostic."
	}

	Subdomain CustomerManagementDomain {
		type = CORE_DOMAIN
		domainVisionStatement = "Subdomain that manages everything related to customer relationship management."
	}

	Subdomain MachineOptimizationDomain {
		type = CORE_DOMAIN
		domainVisionStatement = "Subdomain that manages everything related to machine optimization."
	}

	Subdomain SparePartMarketplaceDomain {
		type = SUPPORTING_DOMAIN
		domainVisionStatement = "Subdomain that manages everything related to machine spare parts marketplace."
	}

	Subdomain UserDomain {
		type = GENERIC_SUBDOMAIN
		domainVisionStatement = "Subdomain that manages user related data and user authentication and authorization."
	}

}

